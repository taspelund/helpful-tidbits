cl-host-checker.py
------------------
Descriptions:
  - Launches a lookup of an individual ARP/NDP entry and returns a summary of
    its attributes. This can be run live or against a cl-support bundle, and
    can check both software and hardware (bcm + mlx) neigh tables.

usage: cl-host-checker [-h] [-a {bcm,mlx}] [-d DIRECTORY] [-l]
                       [-t {4,6,iface,mac}]
                       match

positional arguments:
  match                 specify search string

optional arguments:
  -h, --help            show this help message and exit
  -a {bcm,mlx}, --asic {bcm,mlx}
                        specify ASIC manufacturer. supported inputs:
                        ['bcm'|'mlx']
  -d DIRECTORY, --directory DIRECTORY
                        base directory is searched for input files, e.g.
                        'base_dir/Support' or 'base_dir/support'
  -l, --live            capture output from shell commands instead of cl-
                        support
  -t {4,6,iface,mac}, --search_type {4,6,iface,mac}
                        override detection of search type. supported types:
                        ['4'|'6'|'iface'|'mac']


compare-macs.py
---------------
Descriptions:
  - Collects remote fdb entries from the Linux kernel (sw) and Mellanox sdk (hw)
    and compares the VTEP IP associated with them.

usage: compare-macs.py


evpn_mac_consistency_check.py
-----------------------------
Descriptions:
  - Searches multiple cl-support files for inconsistencies regarding location
    (vtep address) of kernel/zebra macs. Optionally run with -m/-v to filter
    for a specific mac/vni. Parses/compares all macs by default.

usage: evpn_mac_consistency_check.py [-h] [-m MAC] [-v VNI] ...

positional arguments:
  bundles

optional arguments:
  -h, --help         show this help message and exit
  -m MAC, --mac MAC  search for specific mac. format must match output of
                     'bridge fdb show'. must be used with -v/--vni
  -v VNI, --vni VNI  search for mac within this vni. supply vni in numeric
                     format. must be used with -m/--mac

mac.sh
------
Descriptions:
  - Runs iproute2's `bridge fdb [add|del|replace]` against a list of mac
    addresses defined in an external file.
  - Useful for simulating mac moves without a packet generator.

usage: mac.sh { add | del | replace } { bridge-port } { vlan-id } { static | dynamic } { /path/to/mac/file }


punt_everything.py
------------------
Descriptions:
  - Creates an ACL entry in TCAM on Broadcom platforms with an action
    of CopyToCpu.  This results in all transit packets being punted to
    CPU.  Generally this isn't useful, but I once had a customer request
    CPU-forwarded traffic so they could implement TC rules to inject delay,
    so I created this script to make it easy for them.
  - Known to cause duplicate traffic on the wire for L3 flows

usage: punt_everything.py [{show | remove} entry_id]
  - running with no arguments will install a new punt entry into the fp.


set_tunnel_sip.py
-------------
Descriptions:
  - Manually sets the Source IP of the hardware tunnel on Mellanox switches.
  - sx_sdk allows only a single tunnel construct for all VNIs carried over
    VXLAN.  This script calls the python SDK to manually set the SIP attribute
    of the single tunnel construct.

usage: set_tunnel_sip.py [-h] [-t TUNNEL_ID] -s NEW_SIP

required arguments:
  -s			new underlay source ip

optional arguments:
  -t			SDK tunnel id (in hex, defaults to 0x8c00000)

examples:
  - Set SIP to 222.222.222.222
  # ./set_tunnel_sip.py -s 222.222.222.222
